// static/js/Newsletter.js

const Newsletter = ({ data }) => {
    const [imageUrls, setImageUrls] = React.useState({});
  
    React.useEffect(() => {
      // Function to fetch a placeholder image
      const fetchPlaceholderImage = async (topic) => {
        try {
          const response = await fetch(`https://source.unsplash.com/300x200/?${topic}`);
          return response.url;
        } catch (error) {
          console.error('Error fetching image:', error);
          return '/api/placeholder/300/200';
        }
      };
  
      // Fetch images for each topic
      const fetchImages = async () => {
        const topics = data.newsletter.split('\n\n').filter(section => section.trim() !== '').map(section => section.split(':')[0]);
        const imagePromises = topics.map(topic => fetchPlaceholderImage(topic));
        const images = await Promise.all(imagePromises);
        const imageUrlMap = Object.fromEntries(topics.map((topic, index) => [topic, images[index]]));
        setImageUrls(imageUrlMap);
      };
  
      fetchImages();
    }, [data]);
  
    const formatDate = (date) => {
      return new Date(date).toLocaleDateString('en-US', { weekday: 'long', year: 'numeric', month: 'long', day: 'numeric' });
    };
  
    return (
      <div className="max-w-4xl mx-auto p-6 bg-white shadow-lg rounded-lg">
        <header className="text-center mb-8">
          <h1 className="text-3xl font-bold text-indigo-600">Daily Tech Digest</h1>
          <p className="text-gray-500">{formatDate(new Date())}</p>
        </header>
  
        <main>
          {data.newsletter.split('\n\n').filter(section => section.trim() !== '').map((section, index) => {
            const [title, ...content] = section.split(':');
            const imageUrl = imageUrls[title] || '/api/placeholder/300/200';
  
            return (
              <section key={index} className="mb-8 border-b pb-6">
                <h2 className="text-2xl font-semibold text-indigo-800 mb-4">{title}</h2>
                <div className="flex flex-col md:flex-row items-start">
                  <img src={imageUrl} alt={title} className="w-full md:w-1/3 rounded-lg mb-4 md:mb-0 md:mr-4" />
                  <div className="flex-1">
                    <p className="text-gray-700 leading-relaxed">{content.join(':').trim()}</p>
                  </div>
                </div>
              </section>
            );
          })}
        </main>
  
        <footer className="mt-8 pt-4 border-t">
          <h3 className="text-xl font-semibold text-indigo-600 mb-2">Performance Metrics</h3>
          <p className="text-gray-600">Execution Time: {data.execution_time.toFixed(2)} seconds</p>
          
          <h3 className="text-xl font-semibold text-indigo-600 mt-4 mb-2">Evaluation</h3>
          <div className="bg-gray-100 p-4 rounded-lg">
            <p className="text-gray-700"><strong>Relevance:</strong> {data.evaluation.relevance.score.toFixed(2)}</p>
            <p className="text-gray-700"><strong>Coherence:</strong> {data.evaluation.criteria.coherence.toFixed(2)}</p>
            <p className="text-gray-700"><strong>Engagement:</strong> {data.evaluation.criteria.engagement.toFixed(2)}</p>
          </div>
  
          <p className="mt-4 text-sm text-gray-500">
            Images sourced from Unsplash. Content generated by AI. Evaluation metrics based on AI analysis.
          </p>
        </footer>
      </div>
    );
  };